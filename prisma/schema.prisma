// Generator block to specify the Prisma Client generator configuration
generator client {
  provider        = "prisma-client-js" // Specifies that Prisma will generate the Prisma Client for JavaScript
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

// Data source configuration block for MongoDB connection
datasource db {
  provider = "mongodb" // Specifies MongoDB as the database provider
  url      = env("DATABASE_URL") // Database connection URL, sourced from an environment variable
}

// Enum for defining different user roles
enum UserRole {
  ADMIN // Admin role with elevated privileges
  USER // Regular user role
}

enum PointsSource {
  BEAMS_TODAY
  POLL_PARTICIPATION
  ACHIEVEMENT
  REFERRAL
  REFERRAL_BONUS
  NETWORK_POINTS
  CONNECTION_GAME
}

enum NotificationType {
  SYSTEM
  ACHIEVEMENT
  CONTENT_UPDATE
  REMINDER
  SOCIAL
  // Add more types as needed
}

enum ReferralStatus {
  REGISTERED // Default status when the user registers
  VERIFIED // Status when the user verifies their email
  SUBSCRIBED // Status when the user subscribes
}

// Enum to define types of users
enum UserType {
  STUDENT // Represents a student user
  NON_STUDENT // Represents a non-student user
}

// User model definition for storing user data
model User {
  id                        String                      @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  firstName                 String? // User's first name (optional)
  lastName                  String? // User's last name (optional)
  email                     String?                     @unique // User's email address (optional and unique)
  emailVerified             DateTime? // Timestamp of email verification (optional)
  image                     String? // User profile image URL (optional)
  password                  String? // User's hashed password (optional)
  dob                       DateTime? // Date of birth of the user (optional)
  userType                  UserType                    @default(NON_STUDENT) // Type of user, default is NON_STUDENT
  grade                     String? // Grade of the student (optional)
  gender                    String? // Gender of the user (optional)
  interests                 String[]                    @default([]) // List of user interests (default is an empty array)
  securityQuestion1         String? // First security question (optional)
  securityAnswer1           String? // First security answer (optional)
  securityQuestion2         String? // Second security question (optional)
  securityAnswer2           String? // Second security answer (optional)
  accounts                  Account[] // Relationship to the Account model (many-to-one)
  role                      UserRole                    @default(USER) // User's role, default is USER
  isTwoFactorEnabled        Boolean                     @default(false) // Whether two-factor authentication is enabled
  twoFactorConfirmation     TwoFactorConfirmation? // Optional relationship to the TwoFactorConfirmation model
  createdAt                 DateTime                    @default(now()) // Timestamp of user account creation
  updatedAt                 DateTime                    @updatedAt // Timestamp of last update
  userFormCompleted         Boolean                     @default(false) // Whether the user completed the form
  onBoardingCompleted       Boolean                     @default(false) // Whether the user completed onboarding
  isAccessible              Boolean                     @default(false)
  notificationPreference    Boolean                     @default(false)
  isSessionValid            Boolean                     @default(true)
  isBanned                  Boolean                     @default(false)
  schoolId                  String?                     @db.ObjectId
  school                    School?                     @relation(fields: [schoolId], references: [id])
  referralStatus            ReferralStatus?
  referredById              String?                     @db.ObjectId // Foreign key to store the referrer's referralId
  lastLoginAt               DateTime? // Timestamp of the last login (optional)
  lastLoginIp               String? // IP address of the last login (optional)
  notes                     BeamsTodayUserNote[] // Relationship to BeamsTodayUserNote (many-to-one)
  theatreNotes              BeamsTheatreUserNote[] // Relationship to BeamsTheatreUserNote (many-to-one)
  beamsTodayFavorites       BeamsTodayFavorite[] // Relationship to BeamsTodayFavorite (many-to-one)
  beamPoints                UserBeamPoints[] // Relationship to UserBeamPoints (many-to-one)
  beamsTodayUserAnalytics   BeamsTodayUserAnalytics[] // Relationship to BeamsTodayUserAnalytics (many-to-one)
  beamsTheatreFavorites     BeamsTheatreFavorite[] // Relationship to BeamsTheatreFavorite (many-to-one)
  beamsTheatreUserAnalytics BeamsTheatreUserAnalytics[] // Relationship to BeamsTheatreUserAnalytics (many-to-one)
  Leaderboard               Leaderboard[]
  notifications             Notification[]
  userAchievements          UserAchievement[]
  factCompletions           FactCompletion[]
  beamsTodayWatchedContent  BeamsTodayWatchedContent?
  pollResponses             BeamsTodayPollResponse[]
  Referral                  Referral?
  beamPointsHistory         BeamPointsHistory[]
  ConnectionGameCompletion  ConnectionGameCompletion[]
}

// Account model for storing external account login information
model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  userId            String   @db.ObjectId // Foreign key to User
  type              String // Account type (e.g., OAuth, email)
  provider          String // Provider of the account (e.g., Google, Facebook)
  providerAccountId String // Provider-specific account ID
  refresh_token     String?  @db.String // Refresh token for the account (optional)
  access_token      String?  @db.String // Access token for the account (optional)
  expires_at        Int? // Expiration timestamp for the access token (optional)
  token_type        String? // Token type (e.g., Bearer) (optional)
  scope             String? // Scopes granted by the provider (optional)
  id_token          String?  @db.String // ID token for the account (optional)
  session_state     String? // Session state information (optional)
  createdAt         DateTime @default(now()) // Timestamp of account creation
  updatedAt         DateTime @updatedAt // Timestamp of last update
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Relationship to the User model

  @@unique([provider, providerAccountId]) // Ensures unique provider-account ID pair
  @@index([userId]) // Index for faster queries on userId
}

// Model for storing verification tokens used for email verification
model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  email   String // Email address associated with the token
  token   String   @unique // Unique verification token
  expires DateTime // Expiration time for the token

  @@unique([email, token]) // Ensures unique combination of email and token
  @@index([email]) // Index for faster queries on email
}

// Model for storing chnage email tokens used for new  email verification
model ChangeToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  email   String // Email address associated with the token
  token   String   @unique // Unique verification token
  uuid    String   @unique
  expires DateTime // Expiration time for the token

  @@unique([email, token, uuid]) // Ensures unique combination of email and token
  @@index([email]) // Index for faster queries on email
}

// Model for storing password reset tokens
model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  email   String // Email associated with the reset token
  token   String   @unique // Unique password reset token
  expires DateTime // Expiration time for the token

  @@unique([email, token]) // Ensures unique combination of email and token
  @@index([email]) // Index for faster queries on email
}

// Model for storing two-factor authentication tokens
model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  email   String // Email associated with the two-factor token
  token   String   @unique // Unique two-factor token
  expires DateTime // Expiration time for the token

  @@unique([email, token]) // Ensures unique combination of email and token
  @@index([email]) // Index for faster queries on email
}

// Model for confirming two-factor authentication setup
model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  userId String @db.ObjectId // Foreign key to the User model
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) // Relationship to the User model

  @@unique([userId]) // Ensures a unique two-factor confirmation per user
}

model AccessCode {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier
  code      String   @unique // The actual access code
  createdAt DateTime @default(now()) // Timestamp of creation
  updatedAt DateTime @updatedAt // Timestamp of last update
}

model School {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  users User[] // Relation to User model
}

// Model for pending verification requests (e.g., email verification)
model PendingVerification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  email     String   @unique // Email address to be verified
  ip        String // IP address of the verification request
  createdAt DateTime @default(now()) // Timestamp of verification creation
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType
  content   String
  isShown   Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  metadata  Json? // For storing additional data specific to each notification type
  actionUrl String? // Optional URL or deep link for the notification action

  @@index([userId])
  @@index([type])
  @@index([isShown])
}

model Referral {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @unique @db.ObjectId // Foreign key to the user who made the referral
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  referralCode String   @unique // Unique referral code for the referrer
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// FAQ model for storing frequently asked questions and answers
model FAQ {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  question  String // FAQ question
  answer    String // FAQ answer
  category  String // Category for classifying the FAQ
  createdAt DateTime @default(now()) // Timestamp of creation
  updatedAt DateTime @updatedAt // Timestamp of last update
}

// Model for storing contact form responses from users
model ContactFormResponse {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  firstName String // First name of the person submitting the form
  lastName  String // Last name of the person submitting the form
  email     String // Email address of the person submitting the form
  subject   String // Subject of the message
  message   String // The actual message content
  createdAt DateTime @default(now()) // Timestamp of form submission

  @@index([email])
}

model FactOfTheday {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  date          DateTime         @unique // Date of the Beams Today content
  title         String
  finalImage    String // Title of the Beams Today content
  finalImageDark   String
  thumbnail     String
  published     Boolean          @default(false)
  factContent   String           
  referenceLink1 String? // First optional reference link
  referenceLink2 String? // Second optional reference link
  hashtags      String[]        // Array of hashtags
  categoryId    String          @db.ObjectId // Foreign key to FactCategory
  category      FactCategory    @relation(fields: [categoryId], references: [id])
  completions   FactCompletion[]
}


model FactCategory {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String         @unique // Name of the category
  color       String
  facts       FactOfTheday[] // Relation to FactOfTheday
}

model FactCompletion {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  factId      String    @db.ObjectId // Foreign key to FactOfTheday
  userId      String    @db.ObjectId // Foreign key to User
  completed   Boolean   @default(false) // Whether the fact is completed
  completedAt DateTime? // Optional timestamp of when the fact was completed

  fact FactOfTheday @relation(fields: [factId], references: [id], onDelete: Cascade)
  user User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([factId, userId])
}

//// Beams Today Section

// Model for storing Beams Today content
model BeamsToday {
  id                    String                           @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  date                  DateTime                         @unique // Date of the Beams Today content
  title                 String // Title of the Beams Today content
  shortDesc             String // Short description of the content
  viewCount             Int                              @default(0) // Total number of views for this content
  completionCount       Int                              @default(0) // Total number of completions for this content
  totalWatchTime        Int                              @default(0) // Total watch time across all formats
  videoViewCount        Int                              @default(0) // Number of views for video content
  audioViewCount        Int                              @default(0) // Number of views for audio content
  textViewCount         Int                              @default(0) // Number of views for text content
  totalVideoWatchTime   Int                              @default(0) // Total watch time for video content
  totalAudioListenTime  Int                              @default(0) // Total listen time for audio content
  totalTextSpentTime    Int                              @default(0) // Total time spent on text content
  videoUrl              String? // URL for the video content (optional)
  script                String? // Script associated with the content (optional)
  thumbnailUrl          String? // Thumbnail URL for the content (optional)
  articleUrl            String? // Article URL for the content (optional)
  audioUrl              String? // Audio URL for the content (optional)
  published             Boolean                          @default(false)
  categoryId            String                           @db.ObjectId // Foreign key to the BeamsTodayCategory model
  category              BeamsTodayCategory               @relation(fields: [categoryId], references: [id]) // Relationship to BeamsTodayCategory
  poll                  BeamsTodayPoll? // Optional relationship to BeamsTodayPoll
  exclusiveContents     BeamsTodayExclusiveContent[] // Relationship to exclusive content for Beams Today
  downloadableResources BeamsTodayDownloadableResource[] // Relationship to downloadable resources
  userNotes             BeamsTodayUserNote[] // Relationship to user notes
  BeamsTodayFavorite    BeamsTodayFavorite[]

  @@index([published, date]) // For filtering published content and sorting by date
  @@index([published, categoryId]) // For filtering by category and published status
  @@index([categoryId]) // Index for faster queries on categoryId
  // Full-text search index
  @@fulltext([title, shortDesc, script]) // For text search across these fields
}

model ConnectionGame {
  id           String                     @id @default(auto()) @map("_id") @db.ObjectId
  date         DateTime                   @unique
  answer       String
  hint         String
  image        String
  title        String
  thumbnail    String
  answerExplanation String                   @db.String        
  solutionPoints    String[]     
  published    Boolean                    @default(false)
  createdAt    DateTime                   @default(now())
  updatedAt    DateTime                   @updatedAt
  completions  ConnectionGameCompletion[]
}

model ConnectionGameCompletion {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  connectionGameId String         @db.ObjectId
  connectionGame   ConnectionGame @relation(fields: [connectionGameId], references: [id], onDelete: Cascade)
  userId           String         @db.ObjectId // Reference to your User model
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  completed        Boolean        @default(true)
  completedAt      DateTime       @default(now())

  @@unique([connectionGameId, userId]) // Ensure one completion record per user per game
  @@index([connectionGameId])
  @@index([userId]) 
}

// Model for tracking user-completed Beams Today content
model BeamsTodayWatchedContent {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  userId              String   @unique @db.ObjectId // Foreign key to the User model
  viewedBeamsToday    String[] @default([]) // List of viewed Beams Today content
  viewedFormats       Json     @default("{}") // JSON data to track viewed formats (video, audio, etc.)
  completedBeamsToday String[] @default([]) // List of completed Beams Today content
  completedFormats    Json     @default("{}") // JSON data to track completed formats (video, audio, etc.)
  updatedAt           DateTime @default(now()) // Timestamp of last update
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Model for categorizing Beams Today content
model BeamsTodayCategory {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  name              String // Name of the category
  beamsTodayContent BeamsToday[] // Relationship to BeamsToday content

  @@index([name]) // Index for faster queries on category name
}

// Model for creating polls associated with Beams Today content
model BeamsTodayPoll {
  id           String                 @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  title        String // Poll title
  description  String // Poll description
  question     String // Poll question
  createdAt    DateTime               @default(now()) // Timestamp of poll creation
  beamsTodayId String                 @unique @db.ObjectId // Foreign key to BeamsToday
  beamsToday   BeamsToday             @relation(fields: [beamsTodayId], references: [id], onDelete: Cascade) // Relationship to BeamsToday content
  options      BeamsTodayPollOption[] // Relationship to poll options
}

// Model for poll options associated with a poll
model BeamsTodayPollOption {
  id            String                   @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  optionText    String // Text for the poll option
  pollId        String                   @db.ObjectId // Foreign key to the poll
  poll          BeamsTodayPoll           @relation(fields: [pollId], references: [id], onDelete: Cascade) // Relationship to the BeamsTodayPoll model
  userResponses BeamsTodayPollResponse[] // Relationship to user responses
  votes         Int                      @default(0) // Count of votes for this option

  @@index([pollId]) // Index for faster queries on pollId
}

// Model for storing responses to poll options
model BeamsTodayPollResponse {
  id           String               @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  userId       String               @db.ObjectId // Foreign key to the User model
  pollOptionId String               @db.ObjectId // Foreign key to the poll option
  pollOption   BeamsTodayPollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade) // Relationship to the poll option
  createdAt    DateTime             @default(now()) // Timestamp of the response
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // Index for faster queries on userId
  @@index([pollOptionId]) // Index for faster queries on pollOptionId
}

// Model for exclusive content associated with Beams Today
model BeamsTodayExclusiveContent {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  title        String // Title of the exclusive content
  contentUrl   String // URL of the exclusive content
  format       String // Format of the content (e.g., video, audio)
  date         DateTime   @default(now()) // Timestamp of content creation
  beamsTodayId String     @db.ObjectId // Foreign key to BeamsToday
  beamsToday   BeamsToday @relation(fields: [beamsTodayId], references: [id]) // Relationship to BeamsToday

  @@index([beamsTodayId]) // Index for faster queries on beamsTodayId
}

// Model for downloadable resources associated with Beams Today
model BeamsTodayDownloadableResource {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  title        String // Title of the resource
  resourceUrl  String // URL of the resource
  format       String // Format of the resource (e.g., PDF, DOC)
  date         DateTime   @default(now()) // Timestamp of resource creation
  beamsTodayId String     @db.ObjectId // Foreign key to BeamsToday
  beamsToday   BeamsToday @relation(fields: [beamsTodayId], references: [id]) // Relationship to BeamsToday

  @@index([beamsTodayId]) // Index for faster queries on beamsTodayId
}

// Model for user notes on Beams Today content
model BeamsTodayUserNote {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  userId       String     @db.ObjectId // Foreign key to the User model
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade) // Relationship to the User model
  note         String // The note content
  date         DateTime   @default(now()) // Timestamp of note creation
  beamsTodayId String     @db.ObjectId // Foreign key to BeamsToday
  beamsToday   BeamsToday @relation(fields: [beamsTodayId], references: [id], onDelete: Cascade) // Relationship to BeamsToday

  @@index([userId]) // Index for faster queries on userId
  @@index([beamsTodayId]) // Index for faster queries on beamsTodayId
}

// Model for tracking user favorites on Beams Today content
model BeamsTodayFavorite {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  userId       String   @db.ObjectId // Foreign key to the User model
  beamsTodayId String   @db.ObjectId // Foreign key to BeamsToday
  createdAt    DateTime @default(now()) // Timestamp of when the content was favorited

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade) // Relationship to the User model
  beamsToday BeamsToday @relation(fields: [beamsTodayId], references: [id], onDelete: Cascade) // Relationship to BeamsToday

  @@unique([userId, beamsTodayId]) // Ensures each user can favorite a specific Beams Today item only once
  @@index([userId]) // Index for faster queries on userId
  @@index([beamsTodayId]) // Index for faster queries on beamsTodayId
}

// Model for storing user points from Beams Today activities

// Model for storing levels dynamically with name, point range, and caption
model Level {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  levelNumber Int // The level number (e.g., 1, 2, 3, ...)
  minPoints   Int // Minimum points required to reach this level
  maxPoints   Int // Maximum points before moving to the next level
  name        String // Display name of the level (e.g., "Newbie", "Amateur")
  caption     String // Short description of the level
  icon        String
  bgColor     String
  createdAt   DateTime?        @default(now()) // Timestamp when the level was created
  updatedAt   DateTime?        @updatedAt // Timestamp when the level was last updated
  beams       UserBeamPoints[] // Reverse relation to UserBeamPoints (bi-directional relation)

  @@index([levelNumber]) // Index for faster queries based on level number
}

model UserBeamPoints {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  userId    String    @unique @db.ObjectId // Foreign key to the User model
  beams     Int       @default(0) // Total points accumulated by the user
  levelId   String    @db.ObjectId // Foreign key to the Level model
  level     Level     @relation(fields: [levelId], references: [id])
  createdAt DateTime? @default(now()) // Timestamp of when points were earned
  updatedAt DateTime? @updatedAt // Timestamp of last update
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade) // Relationship to the User model

  // Index for faster queries on userId
  @@index([levelId]) // Index for faster queries on levelId
}

model BeamPointsHistory {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  userId      String       @db.ObjectId // Foreign key to the User model
  points      Int // Number of points earned
  source      PointsSource
  description String // Description or reason for the points (e.g., "Watched 3 videos")
  createdAt   DateTime     @default(now()) // Timestamp of when points were earned
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // Index for faster queries on userId
}

model Leaderboard {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  points    Int       @default(0) // Snapshot of the points at the time the leaderboard was generated
  rank      Int // Rank for the user
  startDate DateTime
  endDate   DateTime
  createdAt DateTime? @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  userType UserType // "STUDENT" or "NON_STUDENT"

  @@unique([userId, startDate, endDate, userType]) // Composite index for efficient queries based on userId and date range
  @@index([userId]) // Index for quick user lookups
  @@index([userType, startDate, endDate]) // Composite index for efficient queries based on user type and date range
}

model LeaderboardAnnouncement {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  userType             UserType
  startDate            DateTime
  endDate              DateTime
  announced            Boolean  @default(false)
  achivementCalculated Boolean  @default(false)
  createdAt            DateTime @default(now())

  @@unique([startDate, endDate, userType])
}

model Achievement {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  name                String            @unique
  badgeImageUrl       String
  task                String
  color               String
  actionText          String
  totalCount          Int
  beamsToGain         Int
  personalizedMessage String
  published           Boolean           @default(false)
  actionUrl           String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  userAchievements    UserAchievement[]
}

// UserAchievement model to track user progress on achievements
model UserAchievement {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @db.ObjectId
  achievementId    String   @db.ObjectId
  completionStatus Boolean  @default(false)
  hasGainedBeams   Boolean  @default(false)
  progress         Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
}

// Model for storing analytics data about Beams Today usage
model BeamsTodayUserAnalytics {
  id                        String @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  userId                    String @unique @db.ObjectId // Foreign key to the User model
  totalWatchTimeBeamsToday  Int    @default(0) // Total time spent watching Beams Today content
  totalVideoWatchTime       Int    @default(0) // Total time spent watching video content
  totalAudioListenTime      Int    @default(0) // Total time spent listening to audio content
  totalTextSpentTime        Int    @default(0) // Total time spent reading text content
  individualWatchTimesVideo Json?  @default("{}") // JSON field to track individual video watch times
  individualWatchTimesAudio Json?  @default("{}") // JSON field to track individual audio listen times
  individualWatchTimesText  Json?  @default("{}") // JSON field to track individual text reading times
  user                      User   @relation(fields: [userId], references: [id], onDelete: Cascade) // Relationship to the User model
}

//// Beams Theatre Section

// Model for storing Beams Theatre content
model BeamsTheatre {
  id             String                 @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  title          String // Title of the theatre content
  description    String // Description of the theatre content
  posterUrl      String // URL of the poster image
  genreId        String                 @db.ObjectId // Foreign key to the genre
  genre          BeamsTheatreGenre      @relation(fields: [genreId], references: [id]) // Relationship to BeamsTheatreGenre
  viewType       BeamsTheatreViewType   @default(DEFAULT) // Type of content being shown (e.g., trending, now showing)
  createdAt      DateTime               @default(now()) // Timestamp of creation
  updatedAt      DateTime               @updatedAt // Timestamp of last update
  totalViews     Int                    @default(0) // Total number of views
  totalWatchTime Int                    @default(0) // Total watch time across all users
  episodes       BeamsTheatreEpisode[] // Relationship to BeamsTheatreEpisode
  favorites      BeamsTheatreFavorite[] // Relationship to BeamsTheatreFavorite
  userNotes      BeamsTheatreUserNote[] // Relationship to BeamsTheatreUserNote
}

// Enum to define the view type for Beams Theatre content
enum BeamsTheatreViewType {
  NOW_SHOWING // Currently being shown
  TRENDING // Trending content
  DEFAULT // Default view type
  OTHER // Any other view type
}

// Model for categorizing Beams Theatre content by genre
model BeamsTheatreGenre {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  name         String // Name of the genre
  beamsTheatre BeamsTheatre[] // Relationship to BeamsTheatre content
}

// Model for storing individual episodes within Beams Theatre content
model BeamsTheatreEpisode {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  title             String // Title of the episode
  description       String // Description of the episode
  url               String // URL to access the episode
  thumbnailUrl      String // URL for the thumbnail image
  totalViews        Int          @default(0) // Total views of the episode
  totalWatchTime    Int          @default(0) // Total watch time of the episode
  durationInSeconds Int // Duration of the episode in seconds
  beamsTheatreId    String       @db.ObjectId // Foreign key to the BeamsTheatre model
  beamsTheatre      BeamsTheatre @relation(fields: [beamsTheatreId], references: [id]) // Relationship to BeamsTheatre
  season            String? // Optional season number for episodic content
  createdAt         DateTime     @default(now()) // Timestamp of episode creation
  updatedAt         DateTime     @updatedAt // Timestamp of last update
}

// Model for tracking user favorites on Beams Theatre content
model BeamsTheatreFavorite {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  userId         String   @db.ObjectId // Foreign key to the User model
  beamsTheatreId String   @db.ObjectId // Foreign key to BeamsTheatre
  createdAt      DateTime @default(now()) // Timestamp of when the content was favorited

  user         User         @relation(fields: [userId], references: [id]) // Relationship to the User model
  beamsTheatre BeamsTheatre @relation(fields: [beamsTheatreId], references: [id]) // Relationship to BeamsTheatre

  @@unique([userId, beamsTheatreId]) // Ensures each user can favorite a specific Beams Theatre item only once
  @@index([userId]) // Index for faster queries on userId
  @@index([beamsTheatreId]) // Index for faster queries on beamsTheatreId
}

// Model for storing user notes on Beams Theatre content
model BeamsTheatreUserNote {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  userId         String       @db.ObjectId // Foreign key to the User model
  user           User         @relation(fields: [userId], references: [id]) // Relationship to the User model
  note           String // Content of the note
  date           DateTime     @default(now()) // Timestamp of note creation
  beamsTheatreId String       @db.ObjectId // Foreign key to BeamsTheatre
  beamsTheatre   BeamsTheatre @relation(fields: [beamsTheatreId], references: [id]) // Relationship to BeamsTheatre

  @@index([userId]) // Index for faster queries on userId
  @@index([beamsTheatreId]) // Index for faster queries on beamsTheatreId
}

// Model for storing analytics data about Beams Theatre usage
model BeamsTheatreUserAnalytics {
  id                   String @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier, uses MongoDB ObjectId
  userId               String @unique @db.ObjectId // Foreign key to the User model
  totalWatchTime       Int    @default(0) // Total watch time across all theatre content
  totalSeriesWatchTime Json?  @default("{}") // JSON data to store total watch time per series
  individualWatchTimes Json?  @default("{}") // JSON data to store watch times per individual video
  user                 User   @relation(fields: [userId], references: [id], onDelete: Cascade) // Relationship to the User model
}
