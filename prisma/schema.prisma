generator client {
  provider = "prisma-client-js"
 
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum BeamPointsSource {
  POLL_PARTICIPATION
  WATCHING_VIDEO
  COMPLETING_QUIZ
  OTHER // Add other sources as needed
}

enum UserType {
  STUDENT
  NON_STUDENT
}

model User {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  firstName            String?
  lastName             String?
  email                String?               @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  dob                  DateTime?            
  userType             UserType              @default(NON_STUDENT) 
  grade                String?               
  securityQuestion1    String?
  securityAnswer1      String?
  securityQuestion2    String?
  securityAnswer2      String?
  accounts             Account[]
  role                 UserRole              @default(USER)
  isTwoFactorEnabled   Boolean               @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  userFormCompleted    Boolean               @default(false)
  onBoardingCompleted  Boolean               @default(false)
  lastLoginAt          DateTime?
  lastLoginIp          String?
  notes                BeamsTodayUserNote[]
  theatreNotes         BeamsTheatreUserNote[]
  beamsTodayFavorites  BeamsTodayFavorite[]
  beamPoints           UserBeamPoints[]
  beamsTodayUserAnalytics BeamsTodayUserAnalytics[] 
  beamsTheatreFavorites BeamsTheatreFavorite[]
  beamsTheatreUserAnalytics BeamsTheatreUserAnalytics[]
}

model Account {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  userId            String     @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?    @db.String
  access_token      String?    @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?    @db.String
  session_state     String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String     @unique
  expires   DateTime

  @@unique([email, token])
  @@index([email])
}

model PasswordResetToken {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String     @unique
  expires   DateTime

  @@unique([email, token])
  @@index([email])
}

model TwoFactorToken {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String     @unique
  expires   DateTime

  @@unique([email, token])
  @@index([email])
}

model TwoFactorConfirmation {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @db.ObjectId
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

//// Beams Today
model BeamsToday {
  id                    String                     @id @default(auto()) @map("_id") @db.ObjectId
  date                  DateTime                   @unique
  title                 String
  shortDesc             String
  viewCount             Int                        @default(0)
  totalWatchTime        Int                        @default(0)
  videoViewCount        Int                        @default(0) 
  audioViewCount        Int                        @default(0)  
  textViewCount         Int                        @default(0) 
  totalVideoWatchTime   Int                        @default(0)  
  totalAudioListenTime  Int                        @default(0)  
  totalTextSpentTime    Int                        @default(0)  
  videoUrl              String?
  script                String?
  thumbnailUrl          String?
  articleUrl            String?
  audioUrl              String?
  categoryId            String                     @db.ObjectId
  category            BeamsTodayCategory         @relation(fields: [categoryId], references: [id])
  poll                  BeamsTodayPoll?
  exclusiveContents     BeamsTodayExclusiveContent[]
  downloadableResources BeamsTodayDownloadableResource[]
  userNotes             BeamsTodayUserNote[]
  favourites            BeamsTodayFavorite[]

  @@index([categoryId])
}

model BeamsTodayWatchedContent {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  userId            String    @unique @db.ObjectId
  completedBeamsToday   String[]  @default([])
  completedFormats   Json     @default("{}")
  updatedAt         DateTime  @default(now())
}


model BeamsTodayCategory {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  beamsTodayContent BeamsToday[]

  @@index([name])
}

model BeamsTodayPoll {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  question          String
  createdAt         DateTime     @default(now())
  beamsTodayId      String       @unique @db.ObjectId
  beamsToday        BeamsToday   @relation(fields: [beamsTodayId], references: [id])
  options           BeamsTodayPollOption[]

}

model BeamsTodayPollOption {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  optionText        String
  pollId            String       @db.ObjectId
  poll              BeamsTodayPoll @relation(fields: [pollId], references: [id])
  userResponses     BeamsTodayPollResponse[]
  votes             Int           @default(0)
  @@index([pollId])
}

model BeamsTodayPollResponse {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  userId            String       @db.ObjectId
  pollOptionId      String       @db.ObjectId
  pollOption        BeamsTodayPollOption @relation(fields: [pollOptionId], references: [id])
  createdAt         DateTime     @default(now())

  @@index([userId])
  @@index([pollOptionId])
}

model BeamsTodayExclusiveContent {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  contentUrl        String
  format            String
  date              DateTime   @default(now())
  beamsTodayId      String     @db.ObjectId
  beamsToday        BeamsToday @relation(fields: [beamsTodayId], references: [id])

  @@index([beamsTodayId])
}

model BeamsTodayDownloadableResource {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  resourceUrl       String
  format            String
  date              DateTime   @default(now())
  beamsTodayId      String     @db.ObjectId
  beamsToday        BeamsToday @relation(fields: [beamsTodayId], references: [id])

  @@index([beamsTodayId])
}

model BeamsTodayUserNote {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  userId            String     @db.ObjectId
  user              User       @relation(fields: [userId], references: [id])
  note              String
  date              DateTime   @default(now())
  beamsTodayId      String     @db.ObjectId
  beamsToday        BeamsToday @relation(fields: [beamsTodayId], references: [id])

  @@index([userId])
}

model BeamsTodayFavorite {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  beamsTodayId String   @db.ObjectId
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  beamsToday  BeamsToday @relation(fields: [beamsTodayId], references: [id])

  @@index([userId])
  @@index([beamsTodayId])
  @@unique([userId, beamsTodayId])
}

model UserBeamPoints {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  userId      String           @db.ObjectId
  points      Int              @default(0)
  source      BeamPointsSource
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id])

  @@index([userId])
}



//Analytics



model BeamsTodayUserAnalytics {
  id                         String @id @default(auto()) @map("_id") @db.ObjectId
  userId                     String @unique @db.ObjectId
  totalWatchTimeBeamsToday   Int    @default(0)
  totalVideoWatchTime        Int    @default(0)  // New field
  totalAudioListenTime       Int    @default(0)  // New field
  totalTextSpentTime         Int    @default(0)  // New field
  individualWatchTimesVideo  Json?  @default("{}")  // New field
  individualWatchTimesAudio  Json?  @default("{}")  // New field
  individualWatchTimesText   Json?  @default("{}")  // New field
  user                       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model BeamsTheatre {
  id             String                  @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  posterUrl      String
  genreId        String                  @db.ObjectId
  genre          BeamsTheatreGenre       @relation(fields: [genreId], references: [id])
  viewType       BeamsTheatreViewType    @default(DEFAULT)
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  totalViews     Int                     @default(0)
  totalWatchTime Int                     @default(0)
  episodes       BeamsTheatreEpisode[]
  favorites      BeamsTheatreFavorite[]
  userNotes      BeamsTheatreUserNote[]
}

enum BeamsTheatreViewType {
  NOW_SHOWING
  TRENDING
  DEFAULT
  OTHER
}

model BeamsTheatreGenre {
  id             String                  @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  beamsTheatre   BeamsTheatre[]
}

model BeamsTheatreEpisode {
  id                String                @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  url               String
  thumbnailUrl      String
  totalViews        Int                     @default(0)
  totalWatchTime    Int                     @default(0)
  durationInSeconds Int
  beamsTheatreId    String                @db.ObjectId
  beamsTheatre      BeamsTheatre          @relation(fields: [beamsTheatreId], references: [id])
  season            String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

model BeamsTheatreFavorite {
  id             String                  @id @default(auto()) @map("_id") @db.ObjectId
  userId         String                  @db.ObjectId
  beamsTheatreId String                  @db.ObjectId
  createdAt      DateTime                @default(now())
  user           User                    @relation(fields: [userId], references: [id])
  beamsTheatre   BeamsTheatre            @relation(fields: [beamsTheatreId], references: [id])

  @@unique([userId, beamsTheatreId])
  @@index([userId])
  @@index([beamsTheatreId])
}



model BeamsTheatreUserNote {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  userId            String     @db.ObjectId
  user              User       @relation(fields: [userId], references: [id])
  note              String
  date              DateTime   @default(now())
  beamsTheatreId    String     @db.ObjectId
  beamsTheatre      BeamsTheatre @relation(fields: [beamsTheatreId], references: [id])

  @@index([userId])
  @@index([beamsTheatreId])
}




model BeamsTheatreUserAnalytics {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  userId                String            @unique @db.ObjectId
  totalWatchTime        Int               @default(0)
  totalSeriesWatchTime  Json?             @default("{}")  // Stores total watch time per series
  individualWatchTimes  Json?             @default("{}")  // Stores watch times per video
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}
