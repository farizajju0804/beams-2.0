// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                   String          @id @default(auto()) @map("_id") @db.ObjectId
  name                 String?
  email                String?         @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  securityQuestion1    String?
  securityAnswer1      String?
  securityQuestion2    String?
  securityAnswer2      String?
  accounts             Account[]
  role                 UserRole        @default(USER)
  isTwoFactorEnabled   Boolean         @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  notes                BeamsTodayUserNote[]
  beamsTodayFavorites  BeamsTodayFavorite[]
}

model Account {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  userId            String     @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?    @db.String
  access_token      String?    @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?    @db.String
  session_state     String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String     @unique
  expires   DateTime

  @@unique([email, token])
  @@index([email])
}

model PasswordResetToken {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String     @unique
  expires   DateTime

  @@unique([email, token])
  @@index([email])
}

model TwoFactorToken {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String     @unique
  expires   DateTime

  @@unique([email, token])
  @@index([email])
}

model TwoFactorConfirmation {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @db.ObjectId
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

//// Beams Today
model BeamsToday {
  id                    String                     @id @default(auto()) @map("_id") @db.ObjectId
  date                  DateTime                   @unique
  title                 String
  shortDesc             String
  viewCount             Int                        @default(0)
  totalWatchTime        Int                        @default(0)
  transcript            Json?
  videoUrl              String?
  thumbnailUrl          String?
  articleUrl            String?
  audioUrl              String?
  categoryId            String                     @db.ObjectId
  categories            BeamsTodayCategory         @relation(fields: [categoryId], references: [id])
  polls                 BeamsTodayPoll[]
  // puzzles             BeamsTodayPuzzle[]
  exclusiveContents     BeamsTodayExclusiveContent[]
  downloadableResources BeamsTodayDownloadableResource[]
  userNotes             BeamsTodayUserNote[]
  favourites            BeamsTodayFavorite[]
  @@index([categoryId])
}

model BeamsTodayWatchedContent {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  userId            String    @unique @db.ObjectId
  watchedVideos     String[]  @default([])
  watchedArticles   String[]  @default([])
  listenedAudios    String[]  @default([])
  updatedAt         DateTime  @default(now())
}

model BeamsTodayCategory {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  beamsTodayContent BeamsToday[]

  @@index([name])
}

model BeamsTodayPoll {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  question          String
  options           String[]
  date              DateTime   @default(now())
  results           Json
  beamsTodayId      String     @db.ObjectId
  beamsToday        BeamsToday @relation(fields: [beamsTodayId], references: [id])

  @@index([beamsTodayId])
}

// model BeamsTodayPuzzle {
//   id                String     @id @default(uuid()) @map("_id") @db.ObjectId
//   question          String
//   answers           String[]
//   date              DateTime   @default(now())
//   beamsTodayId      String     @db.ObjectId
//   beamsToday        BeamsToday @relation(fields: [beamsTodayId], references: [id])

//   @@index([beamsTodayId])
// }

model BeamsTodayExclusiveContent {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  contentUrl        String
  format            String
  date              DateTime   @default(now())
  beamsTodayId      String     @db.ObjectId
  beamsToday        BeamsToday @relation(fields: [beamsTodayId], references: [id])

  @@index([beamsTodayId])
}

model BeamsTodayDownloadableResource {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  resourceUrl       String
  format            String
  date              DateTime   @default(now())
  beamsTodayId      String     @db.ObjectId
  beamsToday        BeamsToday @relation(fields: [beamsTodayId], references: [id])

  @@index([beamsTodayId])
}

model BeamsTodayUserNote {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  userId            String     @db.ObjectId
  user              User       @relation(fields: [userId], references: [id])
  note              String
  date              DateTime   @default(now())
  beamsTodayId      String     @db.ObjectId
  beamsToday        BeamsToday @relation(fields: [beamsTodayId], references: [id])

  @@index([userId])
}


model BeamsTodayFavorite {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  beamsTodayId String   @db.ObjectId
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  beamsToday  BeamsToday @relation(fields: [beamsTodayId], references: [id])

  @@index([userId])
  @@index([beamsTodayId])
  @@unique([userId, beamsTodayId])
}
